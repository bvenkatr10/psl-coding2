"0","mypackages = c(""glmnet"", ""ggplot2"", ""gridExtra"")   # required packages"
"0","tmp = setdiff(mypackages, rownames(installed.packages()))  # packages need to be installed"
"0","if (length(tmp) > 0) install.packages(tmp)"
"2","trying URL 'https://cran.rstudio.com/bin/macosx/contrib/4.1/gridExtra_2.3.tgz'
"
"2","Content type 'application/x-gzip'"
"2"," length 1102731 bytes (1.1 MB)
"
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","="
"2","
"
"2","downloaded 1.1 MB

"
"1","
"
"1",""
"1","The downloaded binary packages are in
	/var/folders/p0/2ly9c7k54bs5b4yjqcbgtj340000gn/T//RtmpunPAaA/downloaded_packages"
"1",""
"1","
"
"0","lapply(mypackages, require, character.only = TRUE)"
"2","Loading required package: ggplot2
"
"2","Loading required package: gridExtra
"
"1","[[1]]
"
"1","[1]"
"1"," TRUE"
"1","
"
"1","
"
"1","[[2]]
"
"1","[1]"
"1"," TRUE"
"1","
"
"1","
"
"1","[[3]]
"
"1","[1]"
"1"," TRUE"
"1","
"
"1","
"
"0","set.seed(6682)"
"0",""
"0","#Method 1: Full Model (Full)"
"0","eval_full_model = function(data, test_ids) {"
"0","  full_model = lm(Y ~ ., data = data[-test_ids, ])"
"0","  Ytest_pred = predict(full_model, newdata = data[test_ids,])"
"0","  mspe = mean((data[test_ids,]$Y - Ytest_pred)^2)"
"0",""
"0","  list(mspe=mspe, model_size = length(coef(full_model)) - 1)"
"0","}"
"0",""
"0","#Method 2: Forward AIC (AIC.F)"
"0","eval_aic_f_model = function(data, test_ids) {"
"0","  full_model = lm(Y ~ ., data = data[-test_ids, ])"
"0","  stepAIC = step(lm(Y ~ 1, data = data[-test_ids, ]), "
"0","                  list(upper = full_model),"
"0","                  trace = 0, direction = ""forward"")"
"0","  Ytest_pred = predict(stepAIC, newdata = data[test_ids, ])"
"0","  mspe = mean((data[test_ids,]$Y - Ytest_pred)^2)"
"0","    "
"0","  # number of predictors (excluding the intercept)    "
"0","  model_size = length(stepAIC$coef) - 1"
"0",""
"0","  list(mspe=mspe, model_size = model_size)"
"0","}"
"0",""
"0","#Method 3: Backward AIC (AIC.B)"
"0","eval_aic_b_model = function(data, test_ids) {"
"0","  full_model = lm(Y ~ ., data = data[-test_ids, ])"
"0","  stepAIC = step(full_model, trace = 0, direction = ""backward"")"
"0","  Ytest_pred = predict(stepAIC, newdata = data[test_ids, ])"
"0","  mspe = mean((data[test_ids,]$Y - Ytest_pred)^2)"
"0","    "
"0","  # number of predictors (excluding the intercept)    "
"0","  model_size = length(stepAIC$coef) - 1"
"0",""
"0","  list(mspe=mspe, model_size = model_size)"
"0","}"
"0",""
"0","#Method 4: Forward BIC (BIC.F)"
"0","eval_bic_f_model = function(data, test_ids) {"
"0","  ntrain = nrow(data) - length(test_ids)"
"0","  "
"0","  full_model = lm(Y ~ ., data = data[-test_ids, ])"
"0","  stepAIC = step(lm(Y ~ 1, data = data[-test_ids, ]), "
"0","                  list(upper = full_model),"
"0","                  trace = 0, direction = ""forward"", k = log(ntrain))"
"0","  Ytest_pred = predict(stepAIC, newdata = data[test_ids, ])"
"0","  mspe = mean((data[test_ids,]$Y - Ytest_pred)^2)"
"0","    "
"0","  # number of predictors (excluding the intercept)    "
"0","  model_size = length(stepAIC$coef) - 1"
"0",""
"0","  list(mspe=mspe, model_size = model_size)"
"0","}"
"0",""
"0","#Method 5: Backward BIC (BIC.B)"
"0","eval_bic_b_model = function(data, test_ids) {"
"0","  ntrain = nrow(data) - length(test_ids)"
"0","  "
"0","  full_model = lm(Y ~ ., data = data[-test_ids, ])"
"0","  stepAIC = step(full_model, trace = 0, "
"0","                 direction = ""backward"", k = log(ntrain))"
"0","  Ytest_pred = predict(stepAIC, newdata = data[test_ids, ])"
"0","  mspe = mean((data[test_ids,]$Y - Ytest_pred)^2)"
"0","    "
"0","  # number of predictors (excluding the intercept)    "
"0","  model_size = length(stepAIC$coef) - 1"
"0",""
"0","  list(mspe=mspe, model_size = model_size)"
"0","}"
"0",""
"0","#Method 6: Ridge with lambda.min (R_min)"
"0","eval_ridge_model_min = function(data, test_ids, custom_lambda = exp(seq(-10, 10, 0.2))) {"
"0","  ntrain = nrow(data) - length(test_ids)"
"0","  "
"0","  X = as.matrix(data[, -1])"
"0","  Y = data[, 1]"
"0","  "
"0","  tmpX = scale(X[-test_ids, ]) * sqrt(ntrain / (ntrain - 1))"
"0","  d = svd(tmpX)$d"
"0","  "
"0","  cv.out = cv.glmnet(X[-test_ids,], Y[-test_ids], alpha = 0, lambda = custom_lambda)"
"0",""
"0","  Ytest_pred = predict(cv.out, s = cv.out$lambda.min, newx = X[test_ids, ])"
"0","  mspe = mean((Y[test_ids] - Ytest_pred)^2)"
"0","  model_size = sum(d^2/(d^2 + cv.out$lambda.min*ntrain))"
"0"," "
"0","  list(mspe=mspe, model_size = model_size) "
"0","}"
"0",""
"0","#Method 7: Ridge with lambda.1se (R_1se)"
"0","eval_ridge_model_1se = function(data, test_ids, custom_lambda = exp(seq(-10, 10, 0.2))) {"
"0","  ntrain = nrow(data) - length(test_ids)"
"0","  "
"0","  X = as.matrix(data[, -1])"
"0","  Y = data[, 1]"
"0","  "
"0","  tmpX = scale(X[-test_ids, ]) * sqrt(ntrain / (ntrain - 1))"
"0","  d = svd(tmpX)$d"
"0","  "
"0","  cv.out = cv.glmnet(X[-test_ids,], Y[-test_ids], alpha = 0, lambda = custom_lambda)"
"0","  "
"0","  Ytest_pred = predict(cv.out, s = cv.out$lambda.1se, newx = X[test_ids, ])"
"0","  mspe = mean((Y[test_ids] - Ytest_pred)^2)"
"0","  model_size = sum(d^2/(d^2 + cv.out$lambda.1se*ntrain))"
"0"," "
"0","  list(mspe=mspe, model_size = model_size) "
"0","}"
"0",""
"0","#Method 8: Lasso using lambda.min (L_min)"
"0","eval_lasso_model_min = function(data, test_ids, custom_lambda = exp(seq(-10, 10, 0.2))) {"
"0","  X = as.matrix(data[, -1])"
"0","  Y = data[, 1]  "
"0","  "
"0","  cv.out = cv.glmnet(X[-test_ids, ], Y[-test_ids], alpha = 1, lambda = custom_lambda)"
"0","  "
"0","  Ytest_pred = predict(cv.out, s = cv.out$lambda.min, newx = X[test_ids, ])"
"0","  mspe = mean((Y[test_ids] - Ytest_pred)^2)"
"0","  coef = predict(cv.out, s = cv.out$lambda.min, type = ""coefficients"")"
"0","  model_size = sum(coef != 0) - 1"
"0",""
"0","  list(mspe=mspe, model_size = model_size) "
"0","}"
"0",""
"0","#Method 9: Lasso using lambda.1se (L_1se)"
"0","eval_lasso_model_1se = function(data, test_ids, custom_lambda = exp(seq(-10, 10, 0.2))) {"
"0","  X = as.matrix(data[, -1])"
"0","  Y = data[, 1]  "
"0","  "
"0","  cv.out = cv.glmnet(X[-test_ids, ], Y[-test_ids], alpha = 1)"
"0","  "
"0","  Ytest_pred = predict(cv.out, s = cv.out$lambda.1se, newx = X[test_ids, ])"
"0","  mspe = mean((Y[test_ids] - Ytest_pred)^2)"
"0","  coef = predict(cv.out, s = cv.out$lambda.1se, type = ""coefficients"")"
"0","  model_size = sum(coef != 0) - 1"
"0",""
"0","  list(mspe=mspe, model_size = model_size) "
"0","}"
"0",""
"0","#Method 10: Lasso using lambda.1se with Refit (L_Refit)"
"0","eval_lasso_refit_model = function(data, test_ids, custom_lambda = exp(seq(-10, 10, 0.2))) {"
"0","  X = as.matrix(data[, -1])"
"0","  Y = data[, 1]"
"0","  "
"0","  cv.out = cv.glmnet(X[-test_ids, ], Y[-test_ids], alpha = 1, lambda = custom_lambda)"
"0","  lasso_coef = predict(cv.out, s = cv.out$lambda.1se, type = ""coefficients"")"
"0","  "
"0","  var_sel = row.names(lasso_coef)[nonzeroCoef(lasso_coef)[-1]]"
"0","  tmp_X = X[, colnames(X) %in% var_sel]"
"0","  "
"0","  lasso_refit = coef(lm(Y[-test_ids] ~ tmp_X[-test_ids, ]))"
"0","  "
"0","  Ytest_pred = lasso_refit[1] + tmp_X[test_ids,] %*% lasso_refit[-1]"
"0","  mspe = mean((Y[test_ids] - Ytest_pred)^2)"
"0","  model_size = length(var_sel)"
"0","  "
"0","  list(mspe=mspe, model_size = model_size) "
"0","}"
